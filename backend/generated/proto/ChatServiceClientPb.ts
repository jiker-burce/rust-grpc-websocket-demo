/**
 * @fileoverview gRPC-Web generated client stub for chat
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: proto/chat.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_chat_pb from '../proto/chat_pb'; // proto import: "proto/chat.proto"


export class UserServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRegister = new grpcWeb.MethodDescriptor(
    '/chat.UserService/Register',
    grpcWeb.MethodType.UNARY,
    proto_chat_pb.RegisterRequest,
    proto_chat_pb.RegisterResponse,
    (request: proto_chat_pb.RegisterRequest) => {
      return request.serializeBinary();
    },
    proto_chat_pb.RegisterResponse.deserializeBinary
  );

  register(
    request: proto_chat_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_chat_pb.RegisterResponse>;

  register(
    request: proto_chat_pb.RegisterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_chat_pb.RegisterResponse) => void): grpcWeb.ClientReadableStream<proto_chat_pb.RegisterResponse>;

  register(
    request: proto_chat_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_chat_pb.RegisterResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.UserService/Register',
        request,
        metadata || {},
        this.methodDescriptorRegister,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.UserService/Register',
    request,
    metadata || {},
    this.methodDescriptorRegister);
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/chat.UserService/Login',
    grpcWeb.MethodType.UNARY,
    proto_chat_pb.LoginRequest,
    proto_chat_pb.LoginResponse,
    (request: proto_chat_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    proto_chat_pb.LoginResponse.deserializeBinary
  );

  login(
    request: proto_chat_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_chat_pb.LoginResponse>;

  login(
    request: proto_chat_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_chat_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<proto_chat_pb.LoginResponse>;

  login(
    request: proto_chat_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_chat_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.UserService/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.UserService/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

  methodDescriptorGetUser = new grpcWeb.MethodDescriptor(
    '/chat.UserService/GetUser',
    grpcWeb.MethodType.UNARY,
    proto_chat_pb.GetUserRequest,
    proto_chat_pb.GetUserResponse,
    (request: proto_chat_pb.GetUserRequest) => {
      return request.serializeBinary();
    },
    proto_chat_pb.GetUserResponse.deserializeBinary
  );

  getUser(
    request: proto_chat_pb.GetUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_chat_pb.GetUserResponse>;

  getUser(
    request: proto_chat_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_chat_pb.GetUserResponse) => void): grpcWeb.ClientReadableStream<proto_chat_pb.GetUserResponse>;

  getUser(
    request: proto_chat_pb.GetUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_chat_pb.GetUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.UserService/GetUser',
        request,
        metadata || {},
        this.methodDescriptorGetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.UserService/GetUser',
    request,
    metadata || {},
    this.methodDescriptorGetUser);
  }

  methodDescriptorUpdateUser = new grpcWeb.MethodDescriptor(
    '/chat.UserService/UpdateUser',
    grpcWeb.MethodType.UNARY,
    proto_chat_pb.UpdateUserRequest,
    proto_chat_pb.UpdateUserResponse,
    (request: proto_chat_pb.UpdateUserRequest) => {
      return request.serializeBinary();
    },
    proto_chat_pb.UpdateUserResponse.deserializeBinary
  );

  updateUser(
    request: proto_chat_pb.UpdateUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_chat_pb.UpdateUserResponse>;

  updateUser(
    request: proto_chat_pb.UpdateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_chat_pb.UpdateUserResponse) => void): grpcWeb.ClientReadableStream<proto_chat_pb.UpdateUserResponse>;

  updateUser(
    request: proto_chat_pb.UpdateUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_chat_pb.UpdateUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.UserService/UpdateUser',
        request,
        metadata || {},
        this.methodDescriptorUpdateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.UserService/UpdateUser',
    request,
    metadata || {},
    this.methodDescriptorUpdateUser);
  }

}

export class ChatServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSendMessage = new grpcWeb.MethodDescriptor(
    '/chat.ChatService/SendMessage',
    grpcWeb.MethodType.UNARY,
    proto_chat_pb.SendMessageRequest,
    proto_chat_pb.SendMessageResponse,
    (request: proto_chat_pb.SendMessageRequest) => {
      return request.serializeBinary();
    },
    proto_chat_pb.SendMessageResponse.deserializeBinary
  );

  sendMessage(
    request: proto_chat_pb.SendMessageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_chat_pb.SendMessageResponse>;

  sendMessage(
    request: proto_chat_pb.SendMessageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_chat_pb.SendMessageResponse) => void): grpcWeb.ClientReadableStream<proto_chat_pb.SendMessageResponse>;

  sendMessage(
    request: proto_chat_pb.SendMessageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_chat_pb.SendMessageResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.ChatService/SendMessage',
        request,
        metadata || {},
        this.methodDescriptorSendMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.ChatService/SendMessage',
    request,
    metadata || {},
    this.methodDescriptorSendMessage);
  }

  methodDescriptorGetMessages = new grpcWeb.MethodDescriptor(
    '/chat.ChatService/GetMessages',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_chat_pb.GetMessagesRequest,
    proto_chat_pb.ChatMessage,
    (request: proto_chat_pb.GetMessagesRequest) => {
      return request.serializeBinary();
    },
    proto_chat_pb.ChatMessage.deserializeBinary
  );

  getMessages(
    request: proto_chat_pb.GetMessagesRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_chat_pb.ChatMessage> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/chat.ChatService/GetMessages',
      request,
      metadata || {},
      this.methodDescriptorGetMessages);
  }

  methodDescriptorGetOnlineUsers = new grpcWeb.MethodDescriptor(
    '/chat.ChatService/GetOnlineUsers',
    grpcWeb.MethodType.UNARY,
    proto_chat_pb.GetOnlineUsersRequest,
    proto_chat_pb.GetOnlineUsersResponse,
    (request: proto_chat_pb.GetOnlineUsersRequest) => {
      return request.serializeBinary();
    },
    proto_chat_pb.GetOnlineUsersResponse.deserializeBinary
  );

  getOnlineUsers(
    request: proto_chat_pb.GetOnlineUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_chat_pb.GetOnlineUsersResponse>;

  getOnlineUsers(
    request: proto_chat_pb.GetOnlineUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_chat_pb.GetOnlineUsersResponse) => void): grpcWeb.ClientReadableStream<proto_chat_pb.GetOnlineUsersResponse>;

  getOnlineUsers(
    request: proto_chat_pb.GetOnlineUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_chat_pb.GetOnlineUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.ChatService/GetOnlineUsers',
        request,
        metadata || {},
        this.methodDescriptorGetOnlineUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.ChatService/GetOnlineUsers',
    request,
    metadata || {},
    this.methodDescriptorGetOnlineUsers);
  }

  methodDescriptorJoinRoom = new grpcWeb.MethodDescriptor(
    '/chat.ChatService/JoinRoom',
    grpcWeb.MethodType.UNARY,
    proto_chat_pb.JoinRoomRequest,
    proto_chat_pb.JoinRoomResponse,
    (request: proto_chat_pb.JoinRoomRequest) => {
      return request.serializeBinary();
    },
    proto_chat_pb.JoinRoomResponse.deserializeBinary
  );

  joinRoom(
    request: proto_chat_pb.JoinRoomRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_chat_pb.JoinRoomResponse>;

  joinRoom(
    request: proto_chat_pb.JoinRoomRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_chat_pb.JoinRoomResponse) => void): grpcWeb.ClientReadableStream<proto_chat_pb.JoinRoomResponse>;

  joinRoom(
    request: proto_chat_pb.JoinRoomRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_chat_pb.JoinRoomResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.ChatService/JoinRoom',
        request,
        metadata || {},
        this.methodDescriptorJoinRoom,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.ChatService/JoinRoom',
    request,
    metadata || {},
    this.methodDescriptorJoinRoom);
  }

  methodDescriptorLeaveRoom = new grpcWeb.MethodDescriptor(
    '/chat.ChatService/LeaveRoom',
    grpcWeb.MethodType.UNARY,
    proto_chat_pb.LeaveRoomRequest,
    proto_chat_pb.LeaveRoomResponse,
    (request: proto_chat_pb.LeaveRoomRequest) => {
      return request.serializeBinary();
    },
    proto_chat_pb.LeaveRoomResponse.deserializeBinary
  );

  leaveRoom(
    request: proto_chat_pb.LeaveRoomRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_chat_pb.LeaveRoomResponse>;

  leaveRoom(
    request: proto_chat_pb.LeaveRoomRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_chat_pb.LeaveRoomResponse) => void): grpcWeb.ClientReadableStream<proto_chat_pb.LeaveRoomResponse>;

  leaveRoom(
    request: proto_chat_pb.LeaveRoomRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_chat_pb.LeaveRoomResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.ChatService/LeaveRoom',
        request,
        metadata || {},
        this.methodDescriptorLeaveRoom,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.ChatService/LeaveRoom',
    request,
    metadata || {},
    this.methodDescriptorLeaveRoom);
  }

}

