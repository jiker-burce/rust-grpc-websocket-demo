/**
 * @fileoverview gRPC-Web generated client stub for chat
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: proto/chat.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.chat = require('./chat_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chat.UserServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chat.UserServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.RegisterRequest,
 *   !proto.chat.RegisterResponse>}
 */
const methodDescriptor_UserService_Register = new grpc.web.MethodDescriptor(
  '/chat.UserService/Register',
  grpc.web.MethodType.UNARY,
  proto.chat.RegisterRequest,
  proto.chat.RegisterResponse,
  /**
   * @param {!proto.chat.RegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.RegisterResponse.deserializeBinary
);


/**
 * @param {!proto.chat.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.RegisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.RegisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.UserServiceClient.prototype.register =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.UserService/Register',
      request,
      metadata || {},
      methodDescriptor_UserService_Register,
      callback);
};


/**
 * @param {!proto.chat.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.RegisterResponse>}
 *     Promise that resolves to the response
 */
proto.chat.UserServicePromiseClient.prototype.register =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.UserService/Register',
      request,
      metadata || {},
      methodDescriptor_UserService_Register);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.LoginRequest,
 *   !proto.chat.LoginResponse>}
 */
const methodDescriptor_UserService_Login = new grpc.web.MethodDescriptor(
  '/chat.UserService/Login',
  grpc.web.MethodType.UNARY,
  proto.chat.LoginRequest,
  proto.chat.LoginResponse,
  /**
   * @param {!proto.chat.LoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.LoginResponse.deserializeBinary
);


/**
 * @param {!proto.chat.LoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.LoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.LoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.UserServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.UserService/Login',
      request,
      metadata || {},
      methodDescriptor_UserService_Login,
      callback);
};


/**
 * @param {!proto.chat.LoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.LoginResponse>}
 *     Promise that resolves to the response
 */
proto.chat.UserServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.UserService/Login',
      request,
      metadata || {},
      methodDescriptor_UserService_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.GetUserRequest,
 *   !proto.chat.GetUserResponse>}
 */
const methodDescriptor_UserService_GetUser = new grpc.web.MethodDescriptor(
  '/chat.UserService/GetUser',
  grpc.web.MethodType.UNARY,
  proto.chat.GetUserRequest,
  proto.chat.GetUserResponse,
  /**
   * @param {!proto.chat.GetUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.GetUserResponse.deserializeBinary
);


/**
 * @param {!proto.chat.GetUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.GetUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.GetUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.UserServiceClient.prototype.getUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.UserService/GetUser',
      request,
      metadata || {},
      methodDescriptor_UserService_GetUser,
      callback);
};


/**
 * @param {!proto.chat.GetUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.GetUserResponse>}
 *     Promise that resolves to the response
 */
proto.chat.UserServicePromiseClient.prototype.getUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.UserService/GetUser',
      request,
      metadata || {},
      methodDescriptor_UserService_GetUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.UpdateUserRequest,
 *   !proto.chat.UpdateUserResponse>}
 */
const methodDescriptor_UserService_UpdateUser = new grpc.web.MethodDescriptor(
  '/chat.UserService/UpdateUser',
  grpc.web.MethodType.UNARY,
  proto.chat.UpdateUserRequest,
  proto.chat.UpdateUserResponse,
  /**
   * @param {!proto.chat.UpdateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.UpdateUserResponse.deserializeBinary
);


/**
 * @param {!proto.chat.UpdateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.UpdateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.UpdateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.UserServiceClient.prototype.updateUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.UserService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateUser,
      callback);
};


/**
 * @param {!proto.chat.UpdateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.UpdateUserResponse>}
 *     Promise that resolves to the response
 */
proto.chat.UserServicePromiseClient.prototype.updateUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.UserService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateUser);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chat.ChatServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chat.ChatServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.SendMessageRequest,
 *   !proto.chat.SendMessageResponse>}
 */
const methodDescriptor_ChatService_SendMessage = new grpc.web.MethodDescriptor(
  '/chat.ChatService/SendMessage',
  grpc.web.MethodType.UNARY,
  proto.chat.SendMessageRequest,
  proto.chat.SendMessageResponse,
  /**
   * @param {!proto.chat.SendMessageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.SendMessageResponse.deserializeBinary
);


/**
 * @param {!proto.chat.SendMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.SendMessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.SendMessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.sendMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/SendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendMessage,
      callback);
};


/**
 * @param {!proto.chat.SendMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.SendMessageResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.sendMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/SendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.GetMessagesRequest,
 *   !proto.chat.ChatMessage>}
 */
const methodDescriptor_ChatService_GetMessages = new grpc.web.MethodDescriptor(
  '/chat.ChatService/GetMessages',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.chat.GetMessagesRequest,
  proto.chat.ChatMessage,
  /**
   * @param {!proto.chat.GetMessagesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.ChatMessage.deserializeBinary
);


/**
 * @param {!proto.chat.GetMessagesRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.chat.ChatMessage>}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.getMessages =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/chat.ChatService/GetMessages',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetMessages);
};


/**
 * @param {!proto.chat.GetMessagesRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.chat.ChatMessage>}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServicePromiseClient.prototype.getMessages =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/chat.ChatService/GetMessages',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetMessages);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.GetOnlineUsersRequest,
 *   !proto.chat.GetOnlineUsersResponse>}
 */
const methodDescriptor_ChatService_GetOnlineUsers = new grpc.web.MethodDescriptor(
  '/chat.ChatService/GetOnlineUsers',
  grpc.web.MethodType.UNARY,
  proto.chat.GetOnlineUsersRequest,
  proto.chat.GetOnlineUsersResponse,
  /**
   * @param {!proto.chat.GetOnlineUsersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.GetOnlineUsersResponse.deserializeBinary
);


/**
 * @param {!proto.chat.GetOnlineUsersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.GetOnlineUsersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.GetOnlineUsersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.getOnlineUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/GetOnlineUsers',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetOnlineUsers,
      callback);
};


/**
 * @param {!proto.chat.GetOnlineUsersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.GetOnlineUsersResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.getOnlineUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/GetOnlineUsers',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetOnlineUsers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.JoinRoomRequest,
 *   !proto.chat.JoinRoomResponse>}
 */
const methodDescriptor_ChatService_JoinRoom = new grpc.web.MethodDescriptor(
  '/chat.ChatService/JoinRoom',
  grpc.web.MethodType.UNARY,
  proto.chat.JoinRoomRequest,
  proto.chat.JoinRoomResponse,
  /**
   * @param {!proto.chat.JoinRoomRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.JoinRoomResponse.deserializeBinary
);


/**
 * @param {!proto.chat.JoinRoomRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.JoinRoomResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.JoinRoomResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.joinRoom =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/JoinRoom',
      request,
      metadata || {},
      methodDescriptor_ChatService_JoinRoom,
      callback);
};


/**
 * @param {!proto.chat.JoinRoomRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.JoinRoomResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.joinRoom =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/JoinRoom',
      request,
      metadata || {},
      methodDescriptor_ChatService_JoinRoom);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.LeaveRoomRequest,
 *   !proto.chat.LeaveRoomResponse>}
 */
const methodDescriptor_ChatService_LeaveRoom = new grpc.web.MethodDescriptor(
  '/chat.ChatService/LeaveRoom',
  grpc.web.MethodType.UNARY,
  proto.chat.LeaveRoomRequest,
  proto.chat.LeaveRoomResponse,
  /**
   * @param {!proto.chat.LeaveRoomRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.LeaveRoomResponse.deserializeBinary
);


/**
 * @param {!proto.chat.LeaveRoomRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.LeaveRoomResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.LeaveRoomResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.leaveRoom =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/LeaveRoom',
      request,
      metadata || {},
      methodDescriptor_ChatService_LeaveRoom,
      callback);
};


/**
 * @param {!proto.chat.LeaveRoomRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.LeaveRoomResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.leaveRoom =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/LeaveRoom',
      request,
      metadata || {},
      methodDescriptor_ChatService_LeaveRoom);
};


module.exports = proto.chat;

